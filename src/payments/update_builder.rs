use reqwest::Method;

use crate::{
    client::MercadoPagoClient,
    common::{resolve_json, MercadoPagoRequestError},
};

use super::types::{PartialPaymentResult, PaymentResponse, PaymentStatus, PaymentUpdateOptions};

/// Builder for update a payment
///
/// # Arguments
///
/// * `id` - Unique payment identifier, automatically generated by Mercado Pago.
/// * `options` - Options to update payment.
///
/// # Example
/// ```
/// use mpago::payments::PaymentUpdateBuilder;
///
/// PaymentUpdateBuilder {
///     id: 8972364,
///     options: PaymentUpdateOptions {
///         status: Ok(PaymentStatus::Cancelled),
///         ..Default::default()
///     }
/// }
/// ```
///
/// # Docs
/// <https://www.mercadopago.com.br/developers/pt/reference/payments/_payments_id/put>
pub struct PaymentUpdateBuilder {
    pub id: u64,
    pub options: PaymentUpdateOptions,
}

impl PaymentUpdateBuilder {
    /// Send the request
    pub async fn send(
        self,
        mp_client: &MercadoPagoClient,
    ) -> Result<PaymentResponse, MercadoPagoRequestError> {
        let res = mp_client
            .start_request(Method::PUT, format!("/v1/payments/{}", self.id))
            .json(&self.options)
            .send()
            .await?;

        resolve_json::<PaymentResponse>(res).await
    }

    /// Send a request to cancel the payment
    pub async fn cancel_payment(
        self,
        mp_client: &MercadoPagoClient,
    ) -> Result<PaymentResponse, MercadoPagoRequestError> {
        let res = mp_client
            .start_request(Method::PUT, format!("/v1/payments/{}", self.id))
            .json(&PaymentUpdateOptions {
                status: Some(PaymentStatus::Cancelled),
                ..Default::default()
            })
            .send()
            .await?;

        resolve_json::<PaymentResponse>(res).await
    }
}

impl PaymentResponse {
    /// Send a request to cancel the payment
    pub async fn cancel_payment(
        self,
        mp_client: &MercadoPagoClient,
    ) -> Result<PaymentResponse, MercadoPagoRequestError> {
        PaymentUpdateBuilder {
            id: self.id,
            options: PaymentUpdateOptions {
                status: Some(PaymentStatus::Cancelled),
                ..Default::default()
            },
        }
        .send(mp_client)
        .await
    }
}

impl PartialPaymentResult {
    /// Send a request to cancel the payment
    pub async fn cancel_payment(
        self,
        mp_client: &MercadoPagoClient,
    ) -> Result<PaymentResponse, MercadoPagoRequestError> {
        PaymentUpdateBuilder {
            id: self.id,
            options: PaymentUpdateOptions {
                status: Some(PaymentStatus::Cancelled),
                ..Default::default()
            },
        }
        .send(mp_client)
        .await
    }
}

#[cfg(test)]
mod tests {
    use crate::{
        common::{create_test_client, get_test_payment_options},
        payments::{create_builder::PaymentCreateBuilder, types::PaymentStatus},
    };

    #[tokio::test]
    async fn cancel_payment() {
        let mp_client = create_test_client();

        let payment = PaymentCreateBuilder(get_test_payment_options())
            .send(&mp_client)
            .await
            .unwrap();

        let cancel_response = payment.cancel_payment(&mp_client).await.unwrap();

        assert_eq!(cancel_response.status, PaymentStatus::Cancelled);
    }
}
