use serde::{Deserialize, Serialize};

use crate::payments::types::{IdentificationType, PhoneNumber};

/// Payer's information - ID (identification number), email, identification (type and document number).
#[derive(Deserialize, Serialize, Debug, Default)]
pub struct Payer {
    /// Type of entity of the payer only for bank transfers.
    pub entity_type: Option<EntityType>,
    /// Type of identification of the associated payer (if the payer is a customer, if needed).
    pub r#type: Option<PayerType>,
    /// Payer identifier generated by Mercado Pago.
    pub id: Option<String>,
    /// Email associated with the payer.
    ///
    /// This value will only return a response when `status` is `"approved"`, `refunded` or `charged_back`.
    pub email: String,
    /// Personal identification of the user.
    ///
    /// For example, in Brazil, we have CPF for individuals and CNPJ for companies. Other possible identification codes include CURP (Mexico) and CUIL (Argentina). This object will only return a response when `status` is `"approved"`, `"refunded"` or `"charged_back"`.
    pub identification: Option<PayerIdentification>,
    pub first_name: Option<String>,
    pub last_name: Option<String>,
}

#[derive(Deserialize, Serialize, Debug, Default)]
pub struct AdditionalInfoPayer {
    pub first_name: Option<String>,
    pub last_name: Option<String>,
    /// Buyer's phone number.
    pub phone: Option<PhoneNumber>,
    pub address: Option<PayerAddress>,
    /// Buyer's registration date on your website. [ISO8601](https://www.ionos.com/digitalguide/websites/web-development/iso-8601/) format.
    pub registration_date: Option<String>,
}

#[derive(Deserialize, Serialize, Debug)]
pub struct PayerAddress {
    /// Payer's postal code (ZIP code).
    pub zip_code: String,
    /// Street where the payer lives.
    pub street_name: String,
    /// House or property number where the payer lives.
    pub street_number: u32,
}

/// Personal identification of the user.
///
/// For example, in Brazil, we have CPF for individuals and CNPJ for companies. Other possible identification codes include CURP (Mexico) and CUIL (Argentina). This object will only return a response when `status` is `"approved"`, `"refunded"` or `"charged_back"`.
#[derive(Deserialize, Serialize, Debug)]
pub struct PayerIdentification {
    /// It refers to the type of identification. It can be one of the following types.
    pub r#type: IdentificationType,
    /// The number refers to the identifier of the user in question. If it's a CPF, for example, it will have 11 digits.
    pub number: String,
}

#[derive(Deserialize, Serialize, Debug)]
#[serde(rename_all = "snake_case")]
pub enum PayerType {
    /// Payer is a Customer and belongs to the collector.
    Customer,
    /// The payer doesn't have an account.
    Guest,
}

#[derive(Deserialize, Serialize, Debug, PartialEq, Eq)]
#[serde(rename_all = "snake_case")]
pub enum EntityType {
    Individual,
    Association,
}
